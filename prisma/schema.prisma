// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  username           String?
  bio                String?
  image              String?
  hashedPassword     String?
  createdAt          DateTime? @default(now()) @map("created_at")
  updatedAt          DateTime? @updatedAt
  followerIds        String[]  @db.ObjectId
  followingIds       String[]  @db.ObjectId
  waitingFollowerIds String[]  @db.ObjectId
  hasNotification    Boolean?
  isPrivate          Boolean?  @default(false)

  accounts      Account[]
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  notifications Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  caption   String
  mediaUrl  String
  isPublic  Boolean   @default(true)
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt
  authorId  String    @db.ObjectId

  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes    Like[]
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt
  userId    String    @db.ObjectId
  postId    String    @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String    @db.ObjectId
  username  String?
  link      String?
  mediaUrl  String?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt

  User User @relation(fields: [userId], references: [id])
}
